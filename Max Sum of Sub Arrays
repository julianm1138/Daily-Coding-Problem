Given an array of integers nums and an integer k, find the contiguous subarray (of length k) that has the maximum sum and return its sum.

// We can solve this with a sliding window, where we add and subtract each integer in a window of k size, and keep track of the currentSum for each window.
// First make the window of size k. Keep track of the current sum.
// Then substract the last integer in the array and add the most recent integer in the array to the current sum.




function maxSumOfSubArr(arr, k) {
  let maxSum = 0;
  let currentSum = 0;
  let start = 0;
  let end = 0;

  while (end < k) {
    currentSum += arr[end];
    end++;
  }
  maxSum = currentSum;

  while (end < arr.length) {
    currentSum = currentSum - arr[start] + arr[end];
    maxSum = Math.max(maxSum, currentSum);
    start++;
    end++;
  }
  return maxSum;
}
console.log(maxSumOfSubArr([1, 3, -1, -3, 5, 3, 6, 7], 3));
